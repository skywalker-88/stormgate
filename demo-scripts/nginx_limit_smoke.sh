#!/usr/bin/env bash
set -euo pipefail

# --- Config ---
NGINX_URL="${NGINX_URL:-http://localhost:8081}"   # NGINX in front of StormGate
PATH_TO_HIT="${PATH_TO_HIT:-/search}"             # Any path (limit_req applies at server{} level)
PARALLEL="${PARALLEL:-200}"                       # Concurrency
TOTAL_REQ="${TOTAL_REQ:-800}"                     # Total requests
CURL_OPTS=(-s -S --max-time 5)

echo "=== NGINX limit smoke against ${NGINX_URL}${PATH_TO_HIT} ==="

# --- Preflight: NGINX must be reachable ---
if ! curl "${CURL_OPTS[@]}" "${NGINX_URL}/" >/dev/null; then
  echo "[ERROR] NGINX not reachable at ${NGINX_URL}. Start the stack:"
  echo "        docker compose up -d nginx protector"
  exit 1
fi

# Optional: upstream StormGate health (helpful but not required to prove NGINX limit)
if ! curl "${CURL_OPTS[@]}" http://localhost:8080/health >/dev/null; then
  echo "[WARN] StormGate not reachable on :8080 — NGINX may return 502 for proxied paths."
fi

# --- 1) Sanity probe: show first response headers ---
echo
echo "---- Sanity: one request via NGINX (should be proxied to StormGate) ----"
sanity="$(curl "${CURL_OPTS[@]}" -i "${NGINX_URL}${PATH_TO_HIT}" || true)"
printf '%s\n' "$sanity" | sed -n '1,12p'
if printf '%s' "$sanity" | grep -qi '^X-Stormgate:'; then
  echo "[OK] Upstream StormGate header present"
else
  echo "[INFO] Did not see X-Stormgate on sanity probe; proxy may be ok but header missing"
fi

# --- 2) Burst: try to trip NGINX limit_req (rate=10r/s, burst=50 in your config) ---
echo
echo "---- Burst to trigger NGINX limit_req ----"
tmpdir="$(mktemp -d)"
codes_file="$tmpdir/codes.txt"
hdr_dir="$tmpdir/h"
mkdir -p "$hdr_dir"

# Fire parallel requests; capture status codes and headers for any non-200 responses
seq 1 "$TOTAL_REQ" | xargs -I{} -P "$PARALLEL" bash -c '
  out="$(curl -i -sS --max-time 5 "'"$NGINX_URL$PATH_TO_HIT"'")" || true
  code="$(printf "%s" "$out" | head -n1 | awk "{print \$2}")"
  echo "$code"
  if [[ "$code" != "200" ]]; then
    f="'"$hdr_dir"'/$(date +%s%N).txt"
    printf "%s\n" "$out" | sed -n "1,25p" > "$f"
  fi
' > "$codes_file"

# --- 3) Summary ---
echo
echo "---- Status summary ----"
if [[ -s "$codes_file" ]]; then
  awk '{c[$1]++} END{for(k in c) printf "%s x %d\n", k, c[k] | "sort"}' "$codes_file"
else
  echo "[WARN] No responses recorded? (unexpected)"
fi

total_503="$(grep -c '^503$' "$codes_file" || true)"
total_200="$(grep -c '^200$' "$codes_file" || true)"
echo
echo "200: ${total_200:-0}"
echo "503: ${total_503:-0}"

# --- 4) Evaluate (prove NGINX blocked before StormGate) ---
if [[ "${total_503:-0}" -eq 0 ]]; then
  echo
  echo "[INFO] No 503 responses observed — NGINX likely did not hit its rate/burst limit."
  echo "       Try increasing PARALLEL/TOTAL_REQ (e.g., PARALLEL=400 TOTAL_REQ=1600),"
  echo "       or temporarily lower NGINX burst/rate (not required for this test)."
  exit 0
fi

echo
echo "---- Inspect one 503 sample (should have NO X-Stormgate if NGINX generated it) ----"
sample="$(ls "$hdr_dir" 2>/dev/null | head -n 1 || true)"
if [[ -z "${sample:-}" ]]; then
  echo "[WARN] Could not locate saved failure headers (race). Try rerun."
  exit 0
fi

sed -n '1,25p' "$hdr_dir/$sample"
if grep -qi '^X-Stormgate:' "$hdr_dir/$sample"; then
  echo "[FAIL] 503 sample contains X-Stormgate -> likely from StormGate, not NGINX"
  exit 1
else
  echo "[OK] 503 sample has no X-Stormgate -> generated by NGINX (blocked before StormGate)"
fi

echo
echo "✅ NGINX rate-limit verified."
